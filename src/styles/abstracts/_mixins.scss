/**
* @desc         mixins of the app.
* @requires     variables.scss
*/

// responsive breakpoint manager
@mixin respond-to($breakpoint) {
	$raw-query: map-get($breakpoints, $breakpoint);

	@if $raw-query {
		$query: if(type-of($raw-query) == 'string', unquote($raw-query), inspect($raw-query));

		@media #{$query} {
			@content;
		}
	} @else {
		@error 'No value found for `#{$breakpoint}`. '
           + 'Make sure you have passed a valid value as defined in `$breakpoints` map in variables.scss.';
	}
}

@function toRem($px, $base: 16) {
	@return ($px / $base) * 1rem;
}

// Media Queries
@mixin bp($point, $min: false, $max: false) {
	@if $point == max {
		@media (max-width: 1400px) {
			@content;
		}
	}
	@if $point == desktop {
		@media (max-width: 1200px) {
			@content;
		}
	} @else if $point == tablet {
		@media (min-width: 630px) and (max-width: 1075px) {
			@content;
		}
	} @else if $point == test1 {
		@media (max-width: 1170px) {
			@content;
		}
	} @else if $point == test2 {
		@media (min-width: 1171px) {
			@content;
		}
	} @else if $point == MD {
		@media (min-width: 1025px) {
			@content;
		}
	} @else if $point == M {
		@media (max-width: 1024px) {
			@content;
		}
	} @else if $point == SM {
		@media (min-width: 768px) {
			@content;
		}
	} @else if $point == S {
		@media (max-width: 767px) {
			@content;
		}
	} @else if $point == phone-tablet {
		@media (max-width: 980px) {
			@content;
		}
	} @else if $point == smallLandscape {
		@media (max-width: 630px) and (orientation: landscape) {
			@content;
		}
	} @else if $point == custom {
		@if $min >=1 and $max != false {
			@if (unitless($min) == true) {
				$min: #{$min}px;
			}
			@if (unitless($max) == true) {
				$max: #{$max}px;
			}
			@media (min-width: $min) and (max-width: $max) {
				@content;
			}
		}
		@if $min != false and $max == false {
			@if (unitless($min) == true) {
				$min: #{$min}px;
			}
			@media (min-width: $min) {
				@content;
			}
		}
		@if $min == 0 and $max != false {
			@if (unitless($max) == true) {
				$max: #{$max}px;
			}
			@media (max-width: $max) {
				@content;
			}
		}
	}
}

@mixin staggerAnimation($numOfItems, $intervalDelay, $setStagger: false, $animation: false) {
	@for $i from 1 through $numOfItems {
		&:nth-child(#{($i)}) {
			@if $setStagger {
				$fixedDelay: $intervalDelay + $setStagger * $i;
				@if $animation {
					animation-delay: #{$fixedDelay}ms;
				} @else {
					transition-delay: #{$fixedDelay}ms;
				}
			} @else {
				@if $animation {
					animation-delay: #{$intervalDelay * $i}ms;
				} @else {
					transition-delay: #{$intervalDelay * $i}ms;
				}
			}
		}
	}
}
